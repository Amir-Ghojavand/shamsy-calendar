name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  GO_VERSION: '1.21'
  APP_NAME: 'shamsy-calendar'

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Download dependencies
      run: go mod download

  build-binaries:
    needs: test
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        include:
          # Core platforms
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            suffix: linux-amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            suffix: linux-arm64
          - os: windows-latest
            goos: windows
            goarch: amd64
            suffix: windows-amd64.exe
          - os: macos-latest
            goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            suffix: darwin-arm64
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Get version
      id: version
      run: |
        echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      shell: bash
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o dist/${{ env.APP_NAME }}-${{ matrix.suffix }} .
      shell: bash
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binary-${{ matrix.suffix }}
        path: dist/${{ env.APP_NAME }}-${{ matrix.suffix }}
        retention-days: 5

  build-packages:
    needs: build-binaries
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Linux binary
      uses: actions/download-artifact@v4
      with:
        name: binary-linux-${{ matrix.arch }}
        path: dist/
    
    - name: Get version
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Install packaging tools
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends dpkg-dev rpm
    
    - name: Create DEB package
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        ARCH="${{ matrix.arch }}"
        
        # Create package structure
        mkdir -p packaging/deb/${{ env.APP_NAME }}-${VERSION}-${ARCH}/DEBIAN
        mkdir -p packaging/deb/${{ env.APP_NAME }}-${VERSION}-${ARCH}/usr/bin
        mkdir -p packaging/deb/${{ env.APP_NAME }}-${VERSION}-${ARCH}/usr/share/doc/${{ env.APP_NAME }}
        
        # Copy binary
        cp dist/${{ env.APP_NAME }}-linux-${ARCH} packaging/deb/${{ env.APP_NAME }}-${VERSION}-${ARCH}/usr/bin/${{ env.APP_NAME }}
        chmod +x packaging/deb/${{ env.APP_NAME }}-${VERSION}-${ARCH}/usr/bin/${{ env.APP_NAME }}
        
        # Create control file
        cat > packaging/deb/${{ env.APP_NAME }}-${VERSION}-${ARCH}/DEBIAN/control << EOF
        Package: ${{ env.APP_NAME }}
        Version: ${VERSION#v}
        Section: utils
        Priority: optional
        Architecture: ${ARCH}
        Maintainer: Shamsy Calendar <shamsy@example.com>
        Description: Persian (Shamsy) Calendar CLI Tool
         A command-line Persian calendar application that displays Shamsy dates
         with holiday information and supports various output formats.
        EOF
        
        # Build DEB
        dpkg-deb --build packaging/deb/${{ env.APP_NAME }}-${VERSION}-${ARCH}
        mv packaging/deb/${{ env.APP_NAME }}-${VERSION}-${ARCH}.deb dist/
    
    - name: Create RPM package
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        ARCH="${{ matrix.arch }}"
        
        mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
        
        # Create spec file
        cat > ~/rpmbuild/SPECS/${{ env.APP_NAME }}.spec << EOF
        Name:           ${{ env.APP_NAME }}
        Version:        ${VERSION#v}
        Release:        1%{?dist}
        Summary:        Persian (Shamsy) Calendar CLI Tool
        
        License:        MIT
        URL:            https://github.com/${{ github.repository }}
        
        %description
        A command-line Persian calendar application that displays Shamsy dates
        with holiday information and supports various output formats.
        
        %prep
        
        %build
        
        %install
        mkdir -p %{buildroot}/usr/bin
        cp ${{ github.workspace }}/dist/${{ env.APP_NAME }}-linux-${ARCH} %{buildroot}/usr/bin/${{ env.APP_NAME }}
        
        %files
        /usr/bin/${{ env.APP_NAME }}
        
        %changelog
        * $(date "+%a %b %d %Y") Shamsy Calendar <shamsy@example.com> - ${VERSION#v}-1
        - Release ${VERSION}
        EOF
        
        # Build RPM
        VERSION=${{ steps.version.outputs.version }} rpmbuild -bb ~/rpmbuild/SPECS/${{ env.APP_NAME }}.spec
        find ~/rpmbuild/RPMS -name "*.rpm" -exec cp {} dist/ \;
    
    - name: Upload packages
      uses: actions/upload-artifact@v4
      with:
        name: packages-${{ matrix.arch }}
        path: |
          dist/*.deb
          dist/*.rpm
        retention-days: 5

  release:
    needs: [build-binaries, build-packages]
    runs-on: ubuntu-latest
    timeout-minutes: 10    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        merge-multiple: true
    
    - name: Organize artifacts
      run: |
        mkdir -p release
        find artifacts -type f \( -name "${{ env.APP_NAME }}-*" -o -name "*.deb" -o -name "*.rpm" \) -exec cp {} release/ \;
        ls -la release/
    
    - name: Generate release notes
      id: release_notes
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        PREV_TAG=$(git describe --abbrev=0 --tags $TAG_NAME^ 2>/dev/null || echo "")
        
        cat > release_notes.md << EOF
        ## ðŸŽ‰ Shamsy Calendar $TAG_NAME
        
        Persian (Solar Hijri) calendar CLI tool with holiday support.
        
        ### ðŸ“¥ Downloads
        
        #### Linux
        - **DEB packages**: \`sudo dpkg -i shamsy-calendar-*.deb\`
        - **RPM packages**: \`sudo rpm -i shamsy-calendar-*.rpm\`
        - **Binary**: \`chmod +x shamsy-calendar-linux-* && sudo mv shamsy-calendar-linux-* /usr/local/bin/shamsy-calendar\`
        
        #### Windows
        - **EXE**: Download and run \`shamsy-calendar-windows-amd64.exe\`
        
        #### macOS
        - **Binary**: \`chmod +x shamsy-calendar-darwin-* && sudo mv shamsy-calendar-darwin-* /usr/local/bin/shamsy-calendar\`
        
        ### ðŸš€ Usage
        
        \`\`\`bash
        # Show current month
        shamsy-calendar
        
        # Show specific year
        shamsy-calendar 1403
        
        # Show specific month with holidays
        shamsy-calendar 1403 6 --show-holidays
        \`\`\`
        
        ### ðŸ“‹ Changes
        EOF
        
        if [ -n "$PREV_TAG" ]; then
          echo "" >> release_notes.md
          git log --pretty=format:"- %s" $PREV_TAG..$TAG_NAME >> release_notes.md
        else
          echo "- Initial release" >> release_notes.md
        fi
        
        cat release_notes.md
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: release/*
        body_path: release_notes.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
