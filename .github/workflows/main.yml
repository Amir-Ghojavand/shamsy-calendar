name: Build Scal CLI

on:
  push:
    branches:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Show Go & repo info
        run: |
          go version
          go env

      - name: Show repo tree
        run: |
          echo "PWD: $(pwd)"
          ls -R .

      - name: Download dependencies
        run: go mod download

      - name: Install packaging deps
        if: matrix.goos == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm dpkg-dev

      - name: Verbose Go build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p artifacts
          go build -v -x -o artifacts/debug-${{ matrix.goos }}-${{ matrix.goarch }} .

      # packaging steps unchangedâ€”
      # once build succeeds you can revert "Verbose Go build" to your normal "Build binary" step

      - name: Create .deb
        if: matrix.goos == 'linux'
        run: |
          BIN=scal-${{ matrix.goos }}-${{ matrix.goarch }}
          mkdir -p deb/scal/usr/local/bin deb/scal/DEBIAN
          cp artifacts/debug-${{ matrix.goos }}-${{ matrix.goarch }} deb/scal/usr/local/bin/scal
          chmod +x deb/scal/usr/local/bin/scal

          cat >deb/scal/DEBIAN/control <<EOF
          Package: scal
          Version: 1.0.0
          Section: utils
          Priority: optional
          Architecture: ${{ matrix.goarch }}
          Maintainer: Aria (Amir) Ghojavand <ariaghojavand@gmail.com>
          Description: Scal CLI tool
          Homepage: https://github.com/ariaghojavand/scal
          EOF

          dpkg-deb --build deb/scal
          mv deb/scal.deb artifacts/scal-${{ matrix.goos }}-${{ matrix.goarch }}.deb

      - name: Create .rpm
        if: matrix.goos == 'linux'
        run: |
          # 1) Determine the RPM architecture name
          if [ "${{ matrix.goarch }}" = "amd64" ]; then
            ARCH=x86_64
          else
            ARCH=aarch64
          fi

          # 2) Prepare rpmbuild directories (including arch-specific RPMS folder)
          mkdir -p rpm/BUILD \
                   rpm/RPMS/$ARCH \
                   rpm/SOURCES \
                   rpm/SPECS \
                   rpm/SRPMS

          # 3) Copy the built binary into BUILD/
          cp artifacts/debug-${{ matrix.goos }}-${{ matrix.goarch }} rpm/BUILD/scal
          chmod +x rpm/BUILD/scal

          # 4) Generate spec file, embedding $ARCH
          cat >rpm/SPECS/scal.spec <<EOF
          Name: scal
          Version: 1.0.0
          Release: 1
          Summary: Scal CLI tool
          License: MIT
          Packager: Aria Ghojavand <ariaghojavand@gmail.com>
          BuildArch: $ARCH
          
          %description
          Scal CLI tool
          
          %install
          mkdir -p %{buildroot}/usr/local/bin
          install -m 0755 %{_topdir}/BUILD/scal %{buildroot}/usr/local/bin/scal
          
          %files
          /usr/local/bin/scal
          
          %changelog
          * $(date +"%a %b %d %Y") Aria Ghojavand <ariaghojavand@gmail.com> 1.0.0-1
          - Initial release
          EOF

          # 5) Build the RPM
          rpmbuild --define "_topdir $(pwd)/rpm" \
                   --target "$ARCH" \
                   -bb rpm/SPECS/scal.spec

          # 6) Move the resulting .rpm into artifacts/
          mv rpm/RPMS/$ARCH/scal-1.0.0-1.$ARCH.rpm \
             artifacts/scal-${{ matrix.goos }}-${{ matrix.goarch }}.rpm


      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: scal-${{ matrix.goos }}-${{ matrix.goarch }}
          path: artifacts/*
